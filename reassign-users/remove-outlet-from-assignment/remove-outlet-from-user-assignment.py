# This script will set all users to have access to all outlets in Lightspeed Retail.
# Do not edit this file, instead, run the script with the following command:
# python3 set_all_users_outlets_to_all.py -t API_TOKEN -d DOMAIN_PREFIX -p CURRENT_USER_PASSWORD

import requests
import argparse
import csv

class Client:
  def __init__(self, token, domain_prefix, current_user_password):
    self.token = token
    self.current_user_password = current_user_password
    self.outlet_id = ""
    self.domain_prefix = domain_prefix
    self.base_url = f"https://{domain_prefix}.retail.lightspeed.app"
    self.users_without_any_outlets = []
    self.headers = {
      "Content-Type": "application/json",
      "authorization": f"Bearer {self.token}",
      "Origin": self.base_url
    }

    self.params = {
      "page_size": 10000,  # just being lazy and don't want to figure out pagination
      "deleted": "false"
    }

  def parse_response(self, response):
    if response.status_code == 200:
      json_response = response.json()
      if "editUser" in json_response["data"]:
        edit_user_data = json_response["data"]["editUser"]
        if "validations" in edit_user_data:
          validations = edit_user_data["validations"]
          if "outletInvalid" in validations:
            outlet_invalid = validations["outletInvalid"]
            if outlet_invalid:
              # Outlet is invalid
              return {
                "error": "Outlet is invalid",
                "message": "malformed request"
              }
      return json_response
    else:
      return {
        "error": response.status_code,
        "message": response.text
      }

  def get_all_users(self):
    url = f"{self.base_url}/api/2.0/users"
    response = requests.get(url, headers=self.headers, params=self.params)
    data = self.parse_response(response)
    if "error" in data:
      raise Exception("Request to get users failed")
    if "data" not in data:
      raise Exception("Response data is missing 'data' field")
    verified_users = self.verify_users_data(data["data"])
    users_to_modify = self.remove_outlet_from_user_assignment(verified_users)
    return users_to_modify
  
  def verify_users_data(self, users):
    verified_users = []
    for user in users:
        if "id" in user and "restricted_outlet_ids" in user:
            verified_users.append(user)
        else:
          if "username" in user:
            print(f"User data is incomplete for user: {user['username']}")
          else:
            print(f"User data is incomplete for user: {user}")
    return verified_users

  
  def remove_users_from_outlet(self, outlet_id):
    count = 0
    self.outlet_id = outlet_id
    users = self.get_all_users()
    for user in users:
      response = self.remove_user_from_outlet(user)
      if "error" in response:
        print(f"Failed to update user {user['id']}, request failed with message {response['message']}")
        continue
      count += 1
    print("All done! Updated %s users" % count)

  def remove_outlet_from_user_assignment(self, users):
    users_to_modify = []
    for user in users:
      if self.outlet_id in user["restricted_outlet_ids"]:
        user["restricted_outlet_ids"].remove(self.outlet_id)
        if not user["restricted_outlet_ids"]:
          print(f"User {user['id']} has no restricted outlet IDs")
          self.users_without_any_outlets.append(user)
        users_to_modify.append(user)
    return users_to_modify
  
  def export_users_with_empty_assignments_to_csv(self):
    if self.users_without_any_outlets:
      with open(f'{self.domain_prefix}_users_without_outlets.csv', mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['User ID', 'Username', 'Restricted Outlet IDs'])
        for user in self.users_without_any_outlets:
          writer.writerow([user['id'], user['username'], user['restricted_outlet_ids']])
      print("Users without any outlets exported to users_without_outlets.csv")
    else:
      print("No users without any outlets found")

  def remove_user_from_outlet(self, user):
    graphql_endpoint = f"{self.base_url}/api/graphql"
    outlet_ids_str = ','.join(f'"{id_}"' for id_ in user["restricted_outlet_ids"])

    # GraphQL mutation

    mutation_query = """
    mutation {
      editUser(request: {
        id: "%s",
        currentUserPassword: "%s",
        outletIds: [%s]
      }) {
        user {
          id
          username
        }
        validations {
          outletInvalid
        }
      }
    }
    """ % (user["id"], self.current_user_password, outlet_ids_str)
    
    payload = {
        "query": mutation_query
    }

    response = requests.post(graphql_endpoint, json=payload, headers=self.headers)
    return self.parse_response(response)

def main():
  parser = argparse.ArgumentParser(description='Set all users to all outlets')
  parser.add_argument('-t', type=str, help='Lightspeed API token')
  parser.add_argument('-d', type=str, help='Lightspeed domain prefix')
  parser.add_argument('-p', type=str, help='Current user password')
  parser.add_argument('-o', type=str, help='Outlet ID')
  args = parser.parse_args()

  token = args.t
  domain_prefix = args.d
  current_user_password = args.p

  client = Client(token, domain_prefix, current_user_password)
  client.remove_users_from_outlet(args.o)
  client.export_users_with_empty_assignments_to_csv()

if __name__ == "__main__":
  main()
